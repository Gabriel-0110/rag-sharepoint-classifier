import os
from extract_all import extract_text_from_file
from embed_test import classify_with_llm
from update_sharepoint import update_metadata
from log_classification import log_classification_result
from msal import ConfidentialClientApplication
import requests
from dotenv import load_dotenv

load_dotenv()

# Auth + Graph config
TENANT_ID = os.getenv("TENANT_ID")
CLIENT_ID = os.getenv("CLIENT_ID")
CLIENT_SECRET = os.getenv("CLIENT_SECRET")
SITE_ID = os.getenv("SITE_ID")
LIST_ID = os.getenv("LIST_ID")

# Authenticate to Microsoft Graph
app = ConfidentialClientApplication(
    CLIENT_ID,
    authority=f"https://login.microsoftonline.com/{TENANT_ID}",
    client_credential=CLIENT_SECRET,
)
token_result = app.acquire_token_for_client(scopes=["https://graph.microsoft.com/.default"])
headers = {"Authorization": f"Bearer {token_result['access_token']}"}

# Get all items in SharePoint list
resp = requests.get(
    f"https://graph.microsoft.com/v1.0/sites/{SITE_ID}/lists/{LIST_ID}/items?$expand=driveItem,fields",
    headers=headers,
)
items = resp.json()["value"]

# Create temp folder
DOWNLOAD_DIR = "sp_batch_downloads"
os.makedirs(DOWNLOAD_DIR, exist_ok=True)

for item in items:
    fields = item["fields"]
    item_id = item["id"]
    filename = fields.get("FileLeafRef")
    if not filename:
        continue

    # Skip if already logged
    log_path = "classification_log.csv"
    if os.path.exists(log_path):
        with open(log_path) as f:
            if filename in f.read():
                print(f"✅ Already processed: {filename}")
                continue

    # Download file
    print(f"\n⬇️ Downloading {filename}...")
    

    local_path = os.path.join(DOWNLOAD_DIR, filename)
    with open(local_path, "wb") as out_file:
        out_file.write(requests.get(download_url).content)

    try:
        # Extract, classify, update, and log
        text = extract_text_from_file(local_path)
        doc_type, doc_category = classify_with_llm(text)
        update_metadata(item_id, doc_type, doc_category)
        log_classification_result(filename, doc_type, doc_category, item_id)
    except Exception as e:
        print(f"❌ Failed on {filename}: {e}")
