import os
import requests
from msal import ConfidentialClientApplication
from docx import Document
import fitz
from PIL import Image
import pytesseract
from sentence_transformers import SentenceTransformer
from qdrant_client import QdrantClient
from qdrant_client.http.models import VectorParams, Distance
import uuid

def extract_text(path):
    ext = path.lower().split('.')[-1]
    if ext == 'pdf':
        doc = fitz.open(path)
        text = ''
        for page in doc:
            t = page.get_text().strip()
            if t:
                text += t + '\n'
            else:
                pix = page.get_pixmap()
                img = Image.frombytes('RGB', [pix.width, pix.height], pix.samples)
                text += pytesseract.image_to_string(img) + '\n'
        return text
    elif ext == 'docx':
        doc = Document(path)
        return '\n'.join(p.text for p in doc.paragraphs)
    else:
        return pytesseract.image_to_string(Image.open(path))

if __name__ == '__main__':
    # Locate the latest downloaded document
    dl_dir = os.path.join(os.getcwd(), 'downloads')
    files = [f for f in os.listdir(dl_dir) if os.path.isfile(os.path.join(dl_dir, f))]
    if not files:
        print('No files found in downloads/')
        exit()
    latest = max(files, key=lambda f: os.path.getctime(os.path.join(dl_dir, f)))
    path = os.path.join(dl_dir, latest)
    print(f'Embedding document: {path}')

    # Extract text
    text = extract_text(path)

    # Initialize embedding model and Qdrant client
    embedder = SentenceTransformer('all-MiniLM-L6-v2')
    qdrant = QdrantClient(url='http://localhost:6333')

    # Prepare vector
    vector = embedder.encode([text])[0]

    # Ensure collection exists
    if not qdrant.collection_exists('documents'):
        qdrant.create_collection(
            collection_name='documents',
            vectors_config=VectorParams(size=len(vector), distance=Distance.COSINE)
        )

    # Upsert into Qdrant with a valid UUID as the point ID
    point_id = str(uuid.uuid4())
    qdrant.upsert(
        collection_name='documents',
        points=[{
            'id': point_id,
            'vector': vector.tolist(),
            'payload': {
                'file_name': latest,
                'text_snippet': text[:200]
            }
        }]
    )
    print('âœ… Embedded and upserted to Qdrant as', point_id)

